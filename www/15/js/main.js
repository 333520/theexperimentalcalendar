// Generated by CoffeeScript 1.4.0
(function() {
  var ChristmasSound, Controller, Key, KeysList, Particle, ParticleEmittor, ParticleManager, ParticlesScene, SSCharacter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ChristmasSound = (function() {
    var allpass_index_filter, analyser, audio, bandpass_index_filter, context, filter, frequency, highpass_index_filter, hightshelf_index_filter, loaded, loadingInterval, low_pass_index_filter, lowshelf_index_filter, notch_index_filter, peaking_index_filter, source, sourceNode;

    loaded = false;

    loadingInterval = null;

    audio = null;

    context = null;

    source = null;

    sourceNode = null;

    analyser = null;

    filter = null;

    low_pass_index_filter = 0;

    highpass_index_filter = 1;

    bandpass_index_filter = 2;

    lowshelf_index_filter = 3;

    hightshelf_index_filter = 4;

    peaking_index_filter = 5;

    notch_index_filter = 6;

    allpass_index_filter = 7;

    frequency = 440;

    function ChristmasSound() {
      this.setLoaded = __bind(this.setLoaded, this);

      this.onAudioUpdate = __bind(this.onAudioUpdate, this);

      this.onAudioEnd = __bind(this.onAudioEnd, this);

      this.analyse = __bind(this.analyse, this);
      this.isPlaying = false;
      context = new webkitAudioContext();
      analyser = context.createAnalyser();
      analyser.connect(context.destination);
      this.setupFilter();
      this.setupNode();
      this.loadSound();
    }

    ChristmasSound.prototype.analyse = function() {
      var OFFSET, freqByteData, magnitude;
      freqByteData = new Uint8Array(analyser.frequencyBinCount);
      analyser.getByteFrequencyData(new Uint8Array(analyser.frequencyBinCount));
      OFFSET = 100;
      magnitude = freqByteData[OFFSET];
      return console.log(analyser.getByteFrequencyData(new Uint8Array(analyser.frequencyBinCount)));
    };

    ChristmasSound.prototype.setupFilter = function() {
      filter = context.createBiquadFilter();
      filter.type = lowshelf_index_filter;
      filter.frequency.value = frequency;
      filter.Q.value = 0;
      return filter.gain.value = 0;
    };

    ChristmasSound.prototype.setupNode = function() {
      sourceNode = context.createBufferSource();
      return sourceNode.connect(context.destination);
    };

    ChristmasSound.prototype.loadSound = function(url) {
      url = './media/christmix.mp3';
      audio = new Audio();
      audio.src = url;
      audio.controls = false;
      audio.autoplay = false;
      audio.addEventListener('timeupdate', this.onAudioUpdate);
      audio.addEventListener('ended', this.onAudioEnd);
      source = context.createMediaElementSource(audio);
      source.connect(analyser);
      analyser.connect(context.destination);
      document.body.appendChild(audio);
      $(window).on('canplay', this.onAudioLoad);
      return loadingInterval = setInterval(this.checkVideoLoading, 100);
    };

    ChristmasSound.prototype.onAudioEnd = function(e) {
      return console.log('sound ended');
    };

    ChristmasSound.prototype.onAudioUpdate = function(e) {
      $(document).trigger('audioUpdate', [audio]);
      if (audio.currentTime >= 40 && audio.currentTime <= 44) {
        $(document).trigger('slowMo', true);
      }
      if (audio.currentTime >= 44.5) {
        $(document).trigger('onFireTempo', true);
      }
      if (audio.currentTime >= 74) {
        $(document).trigger('regularTempo', true);
      }
      if (audio.currentTime >= 107) {
        $(document).trigger('endGame', true);
      }
      if (audio.currentTime >= 185) {
        return $(document).trigger('endMusic', true);
      }
    };

    ChristmasSound.prototype.checkVideoLoading = function() {
      if (audio.readyState === 4) {
        $(document).trigger('soundLoaded', true);
        return clearInterval(loadingInterval);
      }
    };

    ChristmasSound.prototype.play = function() {
      audio.play();
      return this.isPlaying = true;
    };

    ChristmasSound.prototype.stop = function() {
      audio.stop();
      return this.isPlaying = false;
    };

    ChristmasSound.prototype.onRequestError = function(e) {
      return console.log(e);
    };

    ChristmasSound.prototype.setLoaded = function(bool) {
      return loaded = bool;
    };

    ChristmasSound.prototype.lowVolume = function() {
      return $('audio').animate({
        volume: 0.1
      }, 5000);
    };

    ChristmasSound.prototype.shutVolume = function() {
      console.log("shut");
      return $('audio').animate({
        volume: 0
      }, 2000);
    };

    return ChristmasSound;

  })();

  SSCharacter = (function() {
    var currentImageIndex, currentImageUrl, currentMoveIndex, currentSSFrom, currentSSTo, frameRate, frameRateInterval, gameEnded, height, loaded, movesLimits, opacity, posX, posY, realFPS, sitFramesDatas, standFramesDatas, standUp, step, walkFramesDatas, width;

    loaded = false;

    step = null;

    currentMoveIndex = null;

    currentSSFrom = null;

    currentSSTo = null;

    frameRateInterval = null;

    currentImageIndex = null;

    currentImageUrl = null;

    frameRate = 40;

    realFPS = null;

    opacity = 0;

    walkFramesDatas = null;

    sitFramesDatas = null;

    standFramesDatas = null;

    posX = null;

    posY = null;

    width = null;

    height = null;

    standUp = false;

    gameEnded = false;

    movesLimits = {
      'walk': [
        {
          'from': 1,
          'to': 97
        }
      ],
      'sit': [
        {
          'from': 1,
          'to': 32
        }, {
          'from': 33,
          'to': 57
        }, {
          'from': 58,
          'to': 85
        }, {
          'from': 86,
          'to': 112
        }
      ],
      'stand': [
        {
          'from': 1,
          'to': 55
        }
      ]
    };

    function SSCharacter() {
      this.update = __bind(this.update, this);
      this.$el = $('.sscharacter.walk');
      currentImageIndex = 1;
      realFPS = 1000 / frameRate;
      this.load();
    }

    SSCharacter.prototype.load = function() {
      var image, imageLoaded, imageUrls, index, jsonLoaded, jsonUrls, url, _i, _j, _len, _len1, _results,
        _this = this;
      index = 0;
      imageLoaded = 0;
      jsonLoaded = 0;
      imageUrls = ['./img/character/walk/character_walk_1.png', './img/character/walk/character_walk_1.png', './img/character/sit/character_notes.png', './img/character/stand/character_stand.png'];
      jsonUrls = ['./img/character/walk/character_walk.json', './img/character/sit/character_notes.json', './img/character/stand/character_stand.json'];
      for (_i = 0, _len = imageUrls.length; _i < _len; _i++) {
        url = imageUrls[_i];
        image = new Image();
        image.onload = function() {
          imageLoaded++;
          if (imageLoaded === 4 && jsonLoaded === 3) {
            return $(document).trigger('characterLoaded', true);
          }
        };
        image.src = url;
      }
      _results = [];
      for (_j = 0, _len1 = jsonUrls.length; _j < _len1; _j++) {
        url = jsonUrls[_j];
        _results.push($.get(url, function(datas) {
          if (index === 0) {
            walkFramesDatas = datas;
          } else if (index === 1) {
            sitFramesDatas = datas;
          } else if (index === 2) {
            standFramesDatas = datas;
          }
          jsonLoaded++;
          index++;
          if (jsonLoaded <= 3 && imageLoaded === 4) {
            return $(document).trigger('characterLoaded', true);
          }
        }));
      }
      return _results;
    };

    SSCharacter.prototype.play = function() {
      var background, framesDatas;
      this.$el.fadeIn(2000);
      step = 'walk';
      framesDatas = walkFramesDatas;
      currentSSFrom = currentImageIndex = movesLimits[step][0].from;
      currentSSTo = movesLimits[step][0].to;
      frameRateInterval = setInterval(this.update, realFPS);
      background = framesDatas.images[framesDatas.frames[framesDatas.animations[currentImageIndex].frames[0]][4]];
      this.$el.css('background', "url(" + background + ")");
      this.$el.addClass('walk');
      return this.$el.fadeIn(500);
    };

    SSCharacter.prototype.update = function() {
      var background, framesDatas, marginLeft, marginTop;
      if (!gameEnded) {
        if (step === 'walk') {
          framesDatas = walkFramesDatas;
        } else if (step === 'sit') {
          framesDatas = sitFramesDatas;
        } else {
          framesDatas = standFramesDatas;
        }
        background = framesDatas.images[framesDatas.frames[framesDatas.animations[currentImageIndex].frames[0]][4]];
        this.$el.css('background', "url(" + background + ")");
        if (!loaded) {
          if (currentImageIndex >= currentSSTo && step === 'walk') {
            $('.sscharacter.walk').hide();
            this.$el = $('.sscharacter.sit').css('opacity', 1);
            step = 'sit';
            framesDatas = sitFramesDatas;
            currentSSFrom = currentImageIndex = movesLimits[step][0].from;
            currentSSTo = movesLimits[step][0].to;
          }
          if (currentImageIndex >= currentSSTo) {
            if (step === 'stand') {
              console.log('fin');
              gameEnded = true;
              clearInterval(frameRateInterval);
            } else if (standUp) {
              $('.sscharacter.sit').hide();
              this.$el = $('.sscharacter.stand').css('opacity', 1);
              step = 'stand';
              framesDatas = standFramesDatas;
              currentSSFrom = currentImageIndex = movesLimits[step][0].from;
              currentSSTo = movesLimits[step][0].to;
              this.$el.removeClass('sit');
              this.$el.addClass('stand');
            } else if (step === 'walk') {
              step = 'sit';
              console.log('step changement : now sit');
              $('.sscharacter.walk').hide();
              this.$el = $('.sscharacter.sit').show();
              framesDatas = sitFramesDatas;
              currentSSFrom = currentImageIndex = movesLimits[step][0].from;
              currentSSTo = movesLimits[step][0].to;
              this.$el.removeClass('walk');
              this.$el.addClass('sit');
            } else if (step === 'sit') {
              currentMoveIndex = Math.floor(Math.random() * movesLimits[step].length);
              currentSSFrom = currentImageIndex = movesLimits[step][currentMoveIndex].from;
              currentSSTo = movesLimits[step][currentMoveIndex].to;
            }
          }
          posX = framesDatas.frames[framesDatas.animations["" + currentImageIndex].frames[0]][0];
          posY = framesDatas.frames[framesDatas.animations["" + currentImageIndex].frames[0]][1];
          width = framesDatas.frames[framesDatas.animations["" + currentImageIndex].frames[0]][2];
          height = framesDatas.frames[framesDatas.animations["" + currentImageIndex].frames[0]][3];
          marginLeft = -Math.floor(width / 2);
          marginTop = -Math.floor(height / 2);
          this.$el.css({
            "background-image": "framesDatas.images[ sitFramesDatas.frames[ sitFramesDatas.animations[" + currentImageIndex + "].frames[0] ][ 4 ] ]",
            "background-position": "-" + posX + "px -" + posY + "px",
            "width": "" + width + "px",
            "height": "" + height + "px"
          });
          return currentImageIndex++;
        }
      }
    };

    SSCharacter.prototype.slowMo = function() {
      frameRate = 1;
      realFPS = 1000 / frameRate;
      clearInterval(frameRateInterval);
      return frameRateInterval = setInterval(this.update, realFPS);
    };

    SSCharacter.prototype.onFire = function() {
      frameRate = 80;
      realFPS = 1000 / frameRate;
      clearInterval(frameRateInterval);
      return frameRateInterval = setInterval(this.update, realFPS);
    };

    SSCharacter.prototype.slowDown = function() {
      frameRate = 40;
      realFPS = 1000 / frameRate;
      clearInterval(frameRateInterval);
      return frameRateInterval = setInterval(this.update, realFPS);
    };

    SSCharacter.prototype.standUp = function() {
      standUp = true;
      frameRate = 30;
      realFPS = 1000 / frameRate;
      clearInterval(frameRateInterval);
      return frameRateInterval = setInterval(this.update, realFPS);
    };

    return SSCharacter;

  })();

  Particle = (function() {
    var PI_2, colors, glow, maxSpeedX;

    maxSpeedX = 2;

    PI_2 = Math.PI * 2;

    colors = ['33, 33, 33', '255, 0, 0', '255, 255, 255', '86, 92, 36', '4, 82, 0', '255, 255, 255'];

    glow = true;

    function Particle(x, y, delay, buffer) {
      this.x = this.endX = x;
      this.y = this.endY = y;
      this.buffer = buffer;
      this.buffer_ctx = buffer.getContext('2d');
      this.radius = Math.floor(Math.random() * 2) + 1;
      this.alpha = 0;
      this.rvb = colors[Math.floor(Math.random() * colors.length)];
      this.startX = null;
      this.startY = null;
      this.scaleX = 1;
      this.scaleY = 1;
      this.delay = delay;
      this.ratio = .2 * Math.random() - .1;
      this.vy = 0.005;
      this.vx = this.vy * this.ratio;
      this.ay = 0.00003;
      this.ax = this.ay * this.ratio;
      this.end = false;
    }

    Particle.prototype.turnOn = function() {
      var rvb;
      rvb = colors[Math.floor(Math.random() * colors.length)];
      this.color = "rgba(" + rvb + ", " + this.alpha + ")";
      this.radius = 2;
      return glow = true;
    };

    Particle.prototype.update = function() {
      if (this.end) {
        return;
      }
      if (this.delay > 0) {
        this.delay -= 1;
        return;
      }
      if (this.vx < maxSpeedX) {
        this.vx += this.ax;
        this.vy += this.ay;
      }
      this.x += this.vx;
      this.y -= this.vy;
      if (this.y < 0) {
        this.animationEnd();
      }
    };

    Particle.prototype.animationEnd = function() {
      this.x = $(document).innerWidth * Math.random();
      this.y = $(document).innerHeight * Math.random();
      this.alpha = 0;
      return this.end = true;
    };

    Particle.prototype.dispose = function() {};

    Particle.prototype.render = function() {
      if (!this.end) {
        if (this.alpha <= 1) {
          this.alpha += 0.005;
          this.color = "rgba(" + this.rvb + ", " + this.alpha + ")";
        }
        this.buffer_ctx.beginPath();
        this.buffer_ctx.arc(this.x, this.y, this.radius, 0, PI_2, true);
        this.buffer_ctx.fillStyle = '#fff';
        this.buffer_ctx.fill();
      }
    };

    return Particle;

  })();

  ParticleEmittor = (function() {
    var particles;

    particles = [];

    function ParticleEmittor(x, y, buffer) {
      this.x = x;
      this.y = y;
      this.buffer = buffer;
      this.buffer_ctx = buffer.getContext('2d');
      this.amount = 0;
      this.lastSendTime = 0;
      this.delayMax = 300;
    }

    ParticleEmittor.prototype.send = function(amount) {
      var i, p, _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= amount ? _i < amount : _i > amount; i = 0 <= amount ? ++_i : --_i) {
        p = new Particle(this.x, this.y, Math.random() * this.delayMax, this.buffer);
        _results.push(particles.push(p));
      }
      return _results;
    };

    ParticleEmittor.prototype.update = function() {
      var from, i, p, _i, _results;
      from = particles.length - 1;
      _results = [];
      for (i = _i = from; _i > 0; i = _i += -1) {
        p = particles[i];
        if (p.end) {
          particles.splice(i, 1);
          continue;
        }
        _results.push(p.update());
      }
      return _results;
    };

    ParticleEmittor.prototype.render = function() {
      var p, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = particles.length; _i < _len; _i++) {
        p = particles[_i];
        _results.push(p.render());
      }
      return _results;
    };

    ParticleEmittor.prototype.getParticles = function() {
      return particles;
    };

    ParticleEmittor.prototype.reset = function() {
      return particles = [];
    };

    return ParticleEmittor;

  })();

  ParticleManager = (function() {
    var emittors, positions;

    positions = [
      {
        x: 55,
        y: 83
      }, {
        x: 70,
        y: 84
      }, {
        x: 82,
        y: 121
      }, {
        x: 94,
        y: 110
      }, {
        x: 116,
        y: 73
      }, {
        x: 127,
        y: 97
      }, {
        x: 168,
        y: 134
      }, {
        x: 183,
        y: 160
      }, {
        x: 235,
        y: 169
      }, {
        x: 257,
        y: 142
      }, {
        x: 315,
        y: 163
      }, {
        x: 355,
        y: 98
      }, {
        x: 374,
        y: 73
      }, {
        x: 399,
        y: 109
      }, {
        x: 412,
        y: 130
      }, {
        x: 426,
        y: 86
      }, {
        x: 444,
        y: 70
      }
    ];

    emittors = [];

    function ParticleManager() {
      var position, _i, _len;
      this.canvas = document.getElementById('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.buffer = document.createElement('canvas');
      this.buffer_context = this.buffer.getContext('2d');
      this.canvas.width = this.buffer.width = this.canvasW = window.innerWidth;
      this.canvas.height = this.buffer.height = this.canvasH = window.innerHeight;
      this.offsetX = this.canvasW / 2 - 257;
      this.offsetY = this.canvasH / 2 - 216;
      for (_i = 0, _len = positions.length; _i < _len; _i++) {
        position = positions[_i];
        emittors.push(new ParticleEmittor(position.x + this.offsetX, position.y + this.offsetY, this.buffer));
      }
    }

    ParticleManager.prototype.resize = function() {
      var emittor, i, position, _i, _ref, _results;
      this.canvas.width = this.buffer.width = this.canvasW = window.innerWidth;
      this.canvas.height = this.buffer.height = this.canvasH = window.innerHeight;
      this.offsetX = this.canvasW / 2 - 257;
      this.offsetY = this.canvasH / 2 - 216;
      _results = [];
      for (i = _i = 0, _ref = positions.length; _i <= _ref; i = _i += 1) {
        position = positions[i];
        emittor = emittors[i];
        emittor.x = position.x + offsetX;
        _results.push(emittor.y = position.y + offsetY);
      }
      return _results;
    };

    ParticleManager.prototype.update = function() {
      var e, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = emittors.length; _i < _len; _i++) {
        e = emittors[_i];
        _results.push(e.update());
      }
      return _results;
    };

    ParticleManager.prototype.render = function() {
      var e, _i, _len;
      this.ctx.clearRect(0, 0, this.canvasW, this.canvasH);
      this.buffer_context.clearRect(0, 0, this.canvasW, this.canvasH);
      for (_i = 0, _len = emittors.length; _i < _len; _i++) {
        e = emittors[_i];
        e.render();
      }
      return this.ctx.drawImage(this.buffer, 0, 0);
    };

    ParticleManager.prototype.sendParticle = function(amount) {
      var emittor, i, _i, _results;
      _results = [];
      for (i = _i = 0; _i < 4; i = ++_i) {
        emittor = this.randomEmittor();
        _results.push(emittor.send(amount));
      }
      return _results;
    };

    ParticleManager.prototype.randomEmittor = function() {
      return emittors[Math.floor(Math.random() * emittors.length)];
    };

    ParticleManager.prototype.getParticles = function() {
      var e, particles, _i, _len;
      particles = [];
      for (_i = 0, _len = emittors.length; _i < _len; _i++) {
        e = emittors[_i];
        particles = particles.concat(e.getParticles());
      }
      return particles;
    };

    ParticleManager.prototype.reset = function() {
      var e, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = emittors.length; _i < _len; _i++) {
        e = emittors[_i];
        _results.push(e.reset());
      }
      return _results;
    };

    return ParticleManager;

  })();

  ParticlesScene = (function() {

    function ParticlesScene(controller) {
      this.alertController = __bind(this.alertController, this);
      this.particles = [];
      this.sentence = 'MERRY CHRISTMAS !';
      this.textRefCanvas = null;
      this.textRefContext = null;
      this.density = 60;
      this.controller = controller;
      this.canvas = document.getElementById('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.canvas.width = this.canvasW = window.innerWidth;
      this.canvas.height = this.canvasH = window.innerHeight;
      this.textRefCanvas = $('<canvas/>')[0];
      this.textRefContext = this.textRefCanvas.getContext('2d');
      this.textRefCanvas.width = this.canvasW;
      this.textRefCanvas.height = 270;
      this.textRefContext.font = '120px xmas';
      this.textRefContext.fillText(this.sentence, (this.canvasW / 2) - (Math.round(this.textRefContext.measureText(this.sentence).width / 2)), 260);
      this.initParticles();
    }

    ParticlesScene.prototype.initParticles = function() {
      var data, i, pixel, posX, posY, _i, _j, _ref, _ref1;
      i = 0;
      data = this.textRefContext.getImageData(0, 0, this.canvasW, this.canvasH).data;
      for (posY = _i = 0, _ref = this.textRefCanvas.height; _i < _ref; posY = _i += 1) {
        for (posX = _j = 0, _ref1 = this.textRefCanvas.width; _j < _ref1; posX = _j += 1) {
          pixel = data[((posX + (posY * this.canvasW)) * 4) - 1];
          if (pixel === 255) {
            this.particles.push(new Particle(posX, posY, this.ctx));
          }
        }
      }
      this.propage();
      return this.renderParticles();
    };

    ParticlesScene.prototype.propage = function() {
      return setTimeout(this.alertController, 2500);
    };

    ParticlesScene.prototype.alertController = function() {
      return this.controller.onParticleSceneInit();
    };

    ParticlesScene.prototype.renderParticles = function() {
      var particle, _i, _len, _ref, _results, _step;
      _ref = this.particles;
      _results = [];
      for (_i = 0, _len = _ref.length, _step = 25; _i < _len; _i += _step) {
        particle = _ref[_i];
        particle.moveAround();
        _results.push(particle.render());
      }
      return _results;
    };

    ParticlesScene.prototype.loopingYouhouuuu = function() {
      ctx.clearRect(0, 0, this.canvasW, this.canvasH);
      return this.renderParticles();
    };

    return ParticlesScene;

  })();

  Key = (function() {
    var $container, types;

    $container = null;

    types = ['up', 'down', 'left', 'right'];

    function Key(time, id) {
      this.disappear = __bind(this.disappear, this);
      this.time = time;
      this.id = id;
      this.played = false;
      this.$el = $('<div/>');
      this.type = types[Math.floor(Math.random() * types.length)];
    }

    Key.prototype.render = function() {
      var clazz, delay;
      $container = $('.scene');
      if (this.time <= 40) {
        clazz = 'appear';
        delay = 1000;
      } else {
        clazz = 'appear2';
        delay = 500;
      }
      this.$img = $('<img/>');
      this.$imgSuccess = $('<img/>');
      this.$img.attr({
        src: "./img/" + this.type + ".png"
      });
      this.$imgSuccess.attr({
        'src': "./img/" + this.type + "_success.png"
      });
      this.$el.attr('class', "key " + this.id + " " + clazz);
      this.$el.append(this.$img);
      this.$el.append(this.$imgSuccess);
      return $container.append(this.$el);
    };

    Key.prototype.transitionFinished = function() {
      return console.log('placed');
    };

    Key.prototype.disappear = function() {
      var _this = this;
      this.$el.removeClass('appear').addClass('disappear');
      return setTimeout(function() {
        return _this.remove();
      }, 500);
    };

    Key.prototype.remove = function() {
      return this.$el.remove();
    };

    Key.prototype.success = function() {
      var _this = this;
      this.$imgSuccess.show();
      this.$imgSuccess.addClass('success');
      return setTimeout(function() {
        return _this.remove();
      }, 500);
    };

    Key.prototype.fail = function() {};

    return Key;

  })();

  KeysList = (function() {
    var currentKey, keys, times;

    times = [];

    keys = [];

    currentKey = null;

    function KeysList() {
      var i, key, _i, _j, _ref;
      this.score = 0;
      for (i = _i = 6; _i < 107; i = ++_i) {
        if (i <= 40 || i >= 74) {
          times.push(i);
        } else if (i >= 44.5 && i <= 74) {
          times.push(i);
          times.push(i + 0.5);
        }
      }
      for (i = _j = 0, _ref = times.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        key = new Key(times[i], i);
        keys.push(key);
      }
    }

    KeysList.prototype.update = function(time) {
      var i, key, _i, _ref, _results;
      if (time >= 40 && time <= 44) {
        currentKey.disappear();
      }
      _results = [];
      for (i = _i = 0, _ref = keys.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        key = keys[i];
        if (time >= key.time) {
          if (currentKey !== null) {
            currentKey.disappear();
            currentKey = key;
          } else {
            currentKey = key;
          }
          key.render();
          _results.push(keys.splice(i, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    KeysList.prototype.onKeyDown = function(keyCode) {
      if (currentKey !== null) {
        if (keyCode === 38 && currentKey.type === 'up') {
          this.success();
        }
        if (keyCode === 40 && currentKey.type === 'down') {
          this.success();
        }
        if (keyCode === 37 && currentKey.type === 'left') {
          this.success();
        }
        if (keyCode === 39 && currentKey.type === 'right') {
          return this.success();
        }
      }
    };

    KeysList.prototype.success = function() {
      this.score++;
      $('.score span').text(this.score * 100);
      currentKey.success();
      return $(document).trigger('success', true);
    };

    KeysList.prototype.fail = function() {
      return currentKey.fail();
    };

    return KeysList;

  })();

  Controller = (function() {
    var christmasSound, christmasSoundLoaded, keysList, onFireModeActived, particleManager, particlesLoaded, particlesScene, regularTempoModeActived, slowMoModeActived, ssCharacter, ssCharacterLoaded, standUpModeActive;

    ssCharacter = null;

    christmasSound = null;

    particlesLoaded = null;

    particlesScene = null;

    keysList = null;

    particleManager = null;

    ssCharacterLoaded = false;

    christmasSoundLoaded = false;

    slowMoModeActived = false;

    onFireModeActived = false;

    standUpModeActive = false;

    regularTempoModeActived = false;

    function Controller() {
      this.onResize = __bind(this.onResize, this);

      this.reloadPage = __bind(this.reloadPage, this);

      this.onKeySucess = __bind(this.onKeySucess, this);

      this.standUp = __bind(this.standUp, this);

      this.onRegularTempo = __bind(this.onRegularTempo, this);

      this.onFire = __bind(this.onFire, this);

      this.slowMo = __bind(this.slowMo, this);

      this.triggerLoop = __bind(this.triggerLoop, this);

      this.stop = __bind(this.stop, this);

      this.looploop = __bind(this.looploop, this);

      this.onSoundEnded = __bind(this.onSoundEnded, this);

      this.onKeyUp = __bind(this.onKeyUp, this);

      this.onAudioUpdate = __bind(this.onAudioUpdate, this);

      this.onCharacterLoaded = __bind(this.onCharacterLoaded, this);

      this.onSoundLoaded = __bind(this.onSoundLoaded, this);

      this.lauchGame = __bind(this.lauchGame, this);
      keysList = new KeysList;
      ssCharacter = new SSCharacter;
      particleManager = new ParticleManager();
      $('.ready').live('click', this.lauchGame);
      $('.end a').bind('click', this.reloadPage);
      $(document).bind('soundLoaded', this.onSoundLoaded);
      $(document).bind('characterLoaded', this.onCharacterLoaded);
      $(document).bind('audioUpdate', this.onAudioUpdate);
      $(document).bind('slowMo', this.slowMo);
      $(document).bind('onFireTempo', this.onFire);
      $(document).bind('regularTempo', this.onRegularTempo);
      $(document).bind('endGame', this.standUp);
      $(document).bind('keyup', this.onKeyUp);
      $(document).bind('endMusic', this.onSoundEnded);
      $(document).bind('success', this.onKeySucess);
      $(window).resize(this.onResize);
    }

    Controller.prototype.lauchGame = function(e) {
      $('.overlay').fadeOut();
      christmasSound.play();
      ssCharacter.play();
      setTimeout(function() {
        return $('.instructions').addClass('show');
      }, 2000);
      setTimeout(function() {
        return $('.instructions').removeClass('show');
      }, 5000);
      return $('.score').delay(1000).fadeIn(2000);
    };

    Controller.prototype.onSoundLoaded = function(e) {
      $('.start span').addClass('ready').text('START');
      console.log('Have a nice moment ;)');
      return this.looploop();
    };

    Controller.prototype.onCharacterLoaded = function(e) {
      return christmasSound = new ChristmasSound;
    };

    Controller.prototype.onParticleSceneInit = function() {
      return console.log('yop');
    };

    Controller.prototype.onAudioUpdate = function(e, audio) {
      return keysList.update(audio.currentTime);
    };

    Controller.prototype.onKeyUp = function(e) {
      return keysList.onKeyDown(e.keyCode);
    };

    Controller.prototype.onSoundEnded = function(e) {
      return christmasSound.shutVolume();
    };

    Controller.prototype.looploop = function() {
      window.requestAnimationFrame(this.looploop);
      particleManager.update();
      return particleManager.render();
    };

    Controller.prototype.stop = function() {
      return window.cancelAnimationFrame(this.looploop);
    };

    Controller.prototype.triggerLoop = function(e) {
      return this.looploop();
    };

    Controller.prototype.slowMo = function(e) {
      if (!slowMoModeActived) {
        slowMoModeActived = true;
        $('.beready').addClass('show');
        setTimeout(function() {
          return $('.beready').removeClass('show');
        }, 3000);
        return ssCharacter.slowMo();
      }
    };

    Controller.prototype.onFire = function(e) {
      if (!onFireModeActived) {
        onFireModeActived = true;
        return ssCharacter.onFire();
      }
    };

    Controller.prototype.onRegularTempo = function(e) {
      if (!regularTempoModeActived) {
        regularTempoModeActived = true;
        return ssCharacter.slowDown();
      }
    };

    Controller.prototype.standUp = function(e) {
      var msg, score,
        _this = this;
      if (!standUpModeActive) {
        standUpModeActive = true;
        christmasSound.lowVolume();
        ssCharacter.standUp();
      }
      score = $('.score span').text();
      if (score <= 1000) {
        msg = 'u_u';
      } else if (score > 1000 && score <= 3000) {
        msg = 'Bitch please !';
      } else if (score > 3000 && score <= 5000) {
        msg = 'Not yet !';
      } else if (score > 5000 && score <= 7000) {
        msg = 'Not bad man !';
      } else if (score > 7000 && score <= 10000) {
        msg = 'Nice !';
      } else if (score > 10000) {
        msg = 'ON FIRE !';
      }
      $('.endScore').text("Score : " + score);
      $('.endMessage').text(msg);
      $('.overlay .start').hide();
      $('.overlay .end').show();
      return $('.overlay').delay(4000).fadeIn(1000, function() {
        return window.cancelAnimationFrame(_this.looploop);
      });
    };

    Controller.prototype.onKeySucess = function(e) {
      return particleManager.sendParticle(1);
    };

    Controller.prototype.reloadPage = function(e) {
      return location.reload();
    };

    Controller.prototype.onResize = function(e) {
      return particleManager.resize();
    };

    return Controller;

  })();

  $(function() {
    var gameController;
    return gameController = new Controller();
  });

}).call(this);
