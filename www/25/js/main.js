// Generated by CoffeeScript 1.4.0
(function() {
  var LOG, Rectangle, background, body, buffer, bufferctx, canvas, choice, ctx, fillRegion, img, imgIdx, imgs, init, k, mainloop, onEnd, onImgLoaded, onResize, onStart, paused, possibility, queue, sh, sw, textFill, words, x, y;

  sw = 0;

  sh = 0;

  background = null;

  words = 'fun nodejs sass compass lex css3 3D movement think dream poetic awesome amazing jquery google html5 audioAPI webgl design processing procedural digital artist project experiment makesense beautyfull contributors art gift web inspiration flash talent originality imagination viewers love passion THREEJS coffeescript christmas happyness nodejs movement interactivity interaction creativity js canvas tweenlite chrome @superguigui @denis_h_ @makio64 @ayamflow @catlrh @Victor @Castemelijn @mrgnou @hellopath @elodiefabbri Mitamo @williamapan @akican @florianzumbrunn @filsdegraphiste @czidler @MarieSpenale @littlesuckers @kokopako @nicoptere @AurelienG @dmmn_ @RayFranco @grgrdvrt @soulwire'.toUpperCase().split(' ');

  queue = null;

  possibility = [1, 2, 3, 4];

  x = 0;

  y = 0;

  canvas = null;

  ctx = null;

  buffer = null;

  bufferctx = null;

  body = null;

  img = null;

  imgIdx = 0;

  imgs = null;

  k = 0;

  paused = true;

  $(document).ready(function() {
    return init();
  });

  init = function() {
    var $25, i, _i;
    body = $('body');
    $25 = $(".waiter");
    $25.click(onStart);
    $("#wrapperbackground").click(onEnd);
    $("#wrapper").click(onEnd);
    $(window).scroll(onEnd);
    $(window).resize(onResize);
    canvas = $("#thxcanvas");
    ctx = canvas[0].getContext("2d");
    buffer = document.createElement('canvas');
    buffer.width = 745;
    buffer.height = 265;
    bufferctx = buffer.getContext("2d");
    imgs = [];
    for (i = _i = 1; _i < 25; i = _i += 1) {
      imgs.push('./25/img/' + i + '.jpg');
    }
    queue = [new Rectangle(0, 0, canvas.width(), canvas.height())];
    onResize();
  };

  onStart = function() {
    requestAnimationFrame(mainloop);
    paused = false;
    $("#wrapper").css("display", "block");
    $("#wrapperbackground").css("display", "block");
    TweenLite.killTweensOf($("#wrapper"));
    TweenLite.killTweensOf($("#wrapperbackground"));
    TweenLite.to($("#wrapper"), .9, {
      css: {
        autoAlpha: 1,
        scaleX: 1,
        scaleY: 1
      },
      delay: .5,
      ease: Back.easeOut
    });
    TweenLite.to($("#wrapper canvas"), .35, {
      css: {
        autoAlpha: 1,
        scaleY: 1
      },
      ease: Quad.easeOut,
      delay: .5
    });
    return TweenLite.to($("#wrapperbackground"), 1, {
      css: {
        autoAlpha: .8
      }
    });
  };

  onEnd = function() {
    paused = true;
    TweenLite.killTweensOf($("#wrapper"));
    TweenLite.killTweensOf($("#wrapperbackground"));
    TweenLite.to($("#wrapper canvas"), .5, {
      css: {
        autoAlpha: 0,
        scaleY: 0
      }
    });
    TweenLite.to($("#wrapper"), .5, {
      css: {
        autoAlpha: 0,
        scaleX: .8,
        scaleY: .8
      }
    });
    return TweenLite.to($("#wrapperbackground"), .5, {
      css: {
        autoAlpha: 0
      },
      delay: .5
    });
  };

  onImgLoaded = function() {
    img = $('<img />');
    img.attr('src', choice(imgs));
    return img = img[0];
  };

  mainloop = function() {
    k++;
    if (!paused) {
      requestAnimationFrame(mainloop);
    }
    ctx.save();
    if (k % 2 || k % 3 === 0) {
      return;
    }
    bufferctx.clearRect(0, 0, 745, 265);
    bufferctx.fillStyle = "#FFFFFF";
    textFill(ctx);
    ctx.drawImage(buffer, 0, 0);
    ctx.globalAlpha = 0.15;
    ctx.fillStyle = "#BF3532";
    ctx.fillRect(0, 0, 745, 265);
    ctx.restore();
  };

  textFill = function() {
    var i, rect;
    i = 0;
    while (queue.length > 0 && i < 1) {
      rect = queue.pop();
      if (rect.width > 6 && rect.height > 6) {
        fillRegion(rect);
        i++;
      }
    }
    if (queue.length === 0) {
      queue = [new Rectangle(0, 0, canvas.width(), canvas.height())];
    }
  };

  fillRegion = function(region) {
    var bound, s, word;
    bufferctx.font = "36px Arial";
    bufferctx.textBaseline = 'top';
    bufferctx.textAlign = 'left';
    word = choice(words);
    bound = new Rectangle(0, 0, bufferctx.measureText(word).width + 3, 36 + 3);
    s = region.width / bound.width * (Math.random() * 0.4 + 0.1);
    if (bound.height * s > region.height) {
      s = region.height / bound.height;
    }
    if (s > 1) {
      s = 1;
    }
    bufferctx.font = (36 * s) + "px Arial";
    bound.x *= s;
    bound.y *= s;
    bound.width *= s;
    bound.height *= s;
    switch (choice(possibility)) {
      case 1:
        x = region.x - bound.x;
        y = region.y - bound.y;
        queue.push(new Rectangle(region.x + bound.width, Math.floor(region.y), region.width - bound.width, bound.height), new Rectangle(region.x, Math.floor(region.y + bound.height), region.width, region.height - bound.height));
        break;
      case 2:
        x = region.x - bound.x;
        y = region.bottom - bound.bottom;
        queue.push(new Rectangle(region.x + bound.width, region.bottom - bound.height, region.width - bound.width, bound.height), new Rectangle(region.x, region.y, region.width, region.height - bound.height));
        break;
      case 3:
        x = region.right - bound.right;
        y = region.y - bound.y;
        queue.push(new Rectangle(region.x, region.y, region.width - bound.width, bound.height), new Rectangle(region.x, region.y + bound.height, region.width, region.height - bound.height));
        break;
      case 4:
        x = region.right - bound.right;
        y = region.bottom - bound.bottom;
        queue.push(new Rectangle(region.x, region.bottom - bound.height, region.width - bound.width, bound.height), new Rectangle(region.x, region.y, region.width, region.height - bound.height));
        break;
    }
    bufferctx.fillText(word, x, y);
  };

  choice = function(array) {
    return array[Math.floor(array.length * Math.random())];
  };

  onResize = function() {
    sw = (window.innerWidth ? window.innerWidth : $(window).width());
    sh = (window.innerHeight ? window.innerHeight : $(window).height());
  };

  LOG = function(msg) {
    console.log(msg);
    return $("#console").prepend(msg + "<br />");
  };

  Rectangle = (function() {

    function Rectangle(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.bottom = this.y + this.height;
      this.right = this.x + this.width;
      return;
    }

    return Rectangle;

  })();

}).call(this);
